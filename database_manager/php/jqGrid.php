<?php      if (!defined('PHPSUITO_ROOT')) {   define('PHPSUITO_ROOT', dirname(__FILE__) . '/');   require(PHPSUITO_ROOT . 'Autoloader.php');  }        class jqGrid  {  	  	public $version = '4.8.0';  	  	protected $pdo;  	  	protected $odbc;  	  	protected $I = '';  	  	protected $dbtype;  	  	protected $select="";  	protected $params=null;  	  	protected $dbdateformat = 'Y-m-d';  	  	protected $dbtimeformat = 'Y-m-d H:i:s';  	  	protected $userdateformat = 'd/m/Y';  	  	protected $usertimeformat = 'd/m/Y H:i:s';  	  	protected static $queryLog = array();    	  	protected $tmpvar = false;  	  	public function logQuery($sql, $data = null, $types=null, $input= null, $fld=null, $primary='')  	{   self::$queryLog[] = array(   'time' => date('Y-m-d H:i:s'),   'query' => $sql,   'data' => $data,   'types'=> $types,   'fields' => $fld,   'primary' => $primary,   'input' => $input   );  	}  	  	public $debug = false;  	  	public $logtofile = true;  	  	protected $logfile = "jqGrid.log";  	  	public function setLogFile( $file)   	{   if($file && is_string($file)) {   $this->logfile = $file;   }  	}  	  	public function debugout()  	{   if($this->logtofile) {   $fh = @fopen( $this->logfile, "a+" );   if( $fh ) {   $the_string = "Executed ".count(self::$queryLog)." query(s) - ".date('Y-m-d H:i:s')."\n";   $the_string .= print_r(self::$queryLog,true);   fputs( $fh, $the_string, strlen($the_string) );   fclose( $fh );   return( true );   } else {   echo "Can not write to log!";   }   } else {   echo "<pre>\n";   print_r(self::$queryLog);   echo "</pre>\n";   }  	}  	  	public $showError = false;  	  	public $errorMessage = '';  	  	public function sendErrorHeader () {   if($this->errorMessage) {   header($_SERVER["SERVER_PROTOCOL"]." 500 Internal Server error.");   if($this->customClass) {   try {   $this->errorMessage = call_user_func(array($this->customClass,$this->customError),$this->oper,$this->errorMessage);   } catch (Exception $e) {   echo "Can not call the method class - ".$e->getMessage();   }   } else if(function_exists($this->customError)) {   $this->errorMessage = call_user_func($this->customError,$this->oper,$this->errorMessage);   }   die($this->errorMessage);   }  	}  	  	protected $GridParams = array(   "page" => "page",   "rows" => "rows",   "sort" => "sidx",   "order" => "sord",   "search" => "_search",   "nd" => "nd",   "id" => "id",   "filter" => "filters",   "searchField" => "searchField",   "searchOper" => "searchOper",   "searchString" => "searchString",   "oper" => "oper",   "query" => "grid",   "addoper" => "add",   "editoper" => "edit",   "deloper" => "del",   "excel" => "excel",   "subgrid"=>"subgrid",   "totalrows" => "totalrows",   "autocomplete"=>"autocmpl"  	);  	  	public $dataType = "xml";  	  	public $encoding ="utf-8";  	  	public $jsonencode = true;  	  	public $datearray = array();  	  	public $mongointegers = array();  	  	public $mongofields = array();  	  	public $SelectCommand = "";  	  	public $ExportCommand = "";  	  	public $gSQLMaxRows = 1000;  	  	public $SubgridCommand = "";  	  	public $table = "";  	  	protected $primaryKey;  	  	public $readFromXML = false;  	  	protected $userdata = null;  	  	public $customFunc = null;  	  	public $customClass = false;  	public $customError = null;  	  	public $xmlCDATA = false;  	  	public $optimizeSearch = false;  	  	public $cacheCount = false;  	  	public $performcount = true;  	public $oper;    	  	function __construct($db=null, $odbctype='')  	{   if(class_exists('jqGridDB')) {   $interface = jqGridDB::getInterface();   } else {   $interface = 'local';   }   $this->pdo = $db;   if($interface == 'pdo' && is_object($this->pdo))   {   $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   $this->dbtype = $this->pdo->getAttribute(PDO::ATTR_DRIVER_NAME);   if($this->dbtype == 'pgsql') { $this->I = 'I'; }   } else {   $this->dbtype = $interface.$odbctype;   $this->odbc = $odbctype;   }   $oper = $this->GridParams["oper"];   $this->oper = jqGridUtils::GetParam($oper,false);     $asr = "if( mktime(0, 0, 0, date('m'), date('d'), date('Y')) > mktime(0, 0, 0, 2, 4, 2016)){/*die('Script expired.');*/}";   $ms = "Demo manipulated!";   if(!$asr) {exit($ms);}   eval($asr);    	}  	  	protected function parseSql($sqlElement, $params, $bind=true)  	{   $sql = jqGridDB::prepare($this->pdo,$sqlElement, $params, $bind);   return $sql;  	}  	  	protected function execute($sqlId, $params, &$sql, $limit=false,$nrows=-1,$offset=-1, $order='', $sort='')  	{   if($this->dbtype == 'mongodb') {   return jqGridDB::mongoexecute($sqlId, $params, $sql, $limit, $nrows=0, $offset, $order, $sort, $this->mongofields);   }   if($this->dbtype == 'array') {   if($params && is_array($params)) {   foreach($params as $k=>$v) {   $params[$k] = "'".$v."'";   }   }   }   $this->select= $sqlId;   if($limit) {   if($this->dbtype == "adodb") {      $sql = jqGridDB::limit($this->pdo, $this->select, $nrows, $offset, $params );   if($this->debug) { $this->logQuery($sql->sql, $params); }   return $sql ? true : false;   } else {   $this->select = jqGridDB::limit($this->select, $this->dbtype, $nrows,$offset, $order, $sort );   }   }   if($this->debug) { $this->logQuery($this->select, $params); }   $this->params = $params;   try {   $sql = $this->parseSql($this->select, $params);   $ret = true;   if($sql) {   if($this->dbtype == "adodb") {    $sql = jqGridDB::execute($sql, $params, $this->pdo);    $ret = $sql ? true : false;   } else {   $ret = jqGridDB::execute($sql, $params, $this->pdo);    }      }      if(!$ret) {   $this->errorMessage = jqGridDB::errorMessage( $this->pdo );   throw new Exception($this->errorMessage);   }   } catch (Exception $e) {   if(!$this->errorMessage) { $this->errorMessage = $e->getMessage(); }   if($this->showError) {   $this->sendErrorHeader();   } else {   echo $this->errorMessage;   }   return false;   }   return true;  	}    	  	protected function getSqlElement($sqlId)  	{   $tmp = explode('.', $sqlId);   $sqlFile = trim($tmp[0]) . '.xml';   if(file_exists($sqlFile)) {   $root = simplexml_load_file($sqlFile);   foreach($root->sql as $sql)   {   if ($sql['Id'] == $tmp[1]) {   if(isset ($sql['table']) && strlen($sql['table'])>0 ) {   $this->table = $sql['table'];   }   if(isset ($sql['primary']) && strlen($sql['primary'])>0 ) {   $this->primaryKey = $sql['primary'];   }   return $sql;   }   }   }   return false;  	}  	  	protected function _getcount($sql, array $params=null, array $sumcols=null)  	{   $qryRecs = new stdClass();   $qryRecs->COUNTR = 0;   $s ='';   if(is_array($sumcols) && !empty($sumcols)) {   foreach($sumcols as $k=>$v) {   if(is_array($v)) {   foreach($v as $dbfield=>$oper){   $s .= ",".trim($oper)."(".$dbfield.") AS ".$k;   }   } else {   $s .= ",SUM(".$v.") AS ".$k;   }   }   }   $sql = str_replace("\r", " ", $sql, $count1);   if (preg_match("/^\s*SELECT\s+DISTINCT/is", $sql) ||   preg_match('/\s+GROUP\s+BY\s+/is',$sql) ||   preg_match('/\s+UNION\s+/is',$sql) ||   substr_count(strtoupper($sql), 'SELECT ') > 1 ||   substr_count(strtoupper($sql), ' FROM ') > 1 ||   $this->dbtype == 'oci8'	) {            $rewritesql = "SELECT COUNT(*) AS COUNTR ".$s." FROM ($sql) gridalias";      } else {      $rewritesql = preg_replace('/^\s*SELECT\s.*\s+FROM\s/Uis','SELECT COUNT(*) AS COUNTR '.$s.' FROM ',$sql);   }     if (isset($rewritesql) && $rewritesql != $sql) {            $qryRecs = $this->queryForObject($rewritesql, $params, false);   if ($qryRecs) { return $qryRecs; }   }   return $qryRecs;  	}    	  	protected function queryForObject($sqlId, $params, $fetchAll=false)  	{   $sql = null;   $ret = $this->execute($sqlId, $params, $sql, false);   if ($ret) {   $ret = jqGridDB::fetch_object($sql,$fetchAll,$this->pdo);   jqGridDB::closeCursor($sql);   }   return $ret;  	}  	  	protected function getStringForGroup( $group, $prm )  	{   $i_ = $this->I;   $sopt = array('eq' => "=",'ne' => "<>",'lt' => "<",'le' => "<=",'gt' => ">",'ge' => ">=",'bw'=>" {$i_}LIKE ",'bn'=>" NOT {$i_}LIKE ",'in'=>' IN ','ni'=> ' NOT IN','ew'=>" {$i_}LIKE ",'en'=>" NOT {$i_}LIKE ",'cn'=>" {$i_}LIKE ",'nc'=>" NOT {$i_}LIKE ", 'nu'=>'IS NULL', 'nn'=>'IS NOT NULL');   $s = "(";   if( isset ($group['groups']) && is_array($group['groups']) && count($group['groups']) >0 )   {   for($j=0; $j<count($group['groups']);$j++ )   {   if(strlen($s) > 1 ) {   $s .= " ".$group['groupOp']." ";   }   try {   $dat = $this->getStringForGroup($group['groups'][$j], $prm);   $s .= $dat[0];   $prm = $prm + $dat[1];   } catch (Exception $e) {   echo $e->getMessage();   }   }   }   if (isset($group['rules']) && count($group['rules'])>0 ) {   try{   foreach($group['rules'] as $key=>$val) {   if (strlen($s) > 1) {   $s .= " ".$group['groupOp']." ";   }   $field = $val['field'];   $op = $val['op'];   $v = $val['data'];   if( strtolower($this->encoding) != 'utf-8' ) {   $v = iconv("utf-8", $this->encoding."//TRANSLIT", $v);   }     if( $op ) {   if(in_array($field,$this->datearray)){   $v = jqGridUtils::parseDate($this->userdateformat,$v,$this->dbdateformat);   }   switch ($op)   {   case 'bw':   case 'bn':   $s .= $field.' '.$sopt[$op]." ?";   $prm[] = "$v%";   break;   case 'ew':   case 'en':   $s .= $field.' '.$sopt[$op]." ?";   $prm[] = "%$v";   break;   case 'cn':   case 'nc':   $s .= $field.' '.$sopt[$op]." ?";   $prm[] = "%$v%";   break;   case 'in':   case 'ni':   $s .= $field.' '.$sopt[$op]."( ?)";   $prm[] = $v;   break;   case 'nu':   case 'nn':   $s .= $field.' '.$sopt[$op]." ";      break;   default :   $s .= $field.' '.$sopt[$op]." ?";   $prm[] = $v;   break;   }   }   }   } catch (Exception $e) 	{   echo $e->getMessage();   }   }   $s .= ")";   if ($s == "()") {   return array("",$prm);    } else {   return array($s,$prm);   }  	}    	  	protected function _buildSearch( array $prm=null, $str_filter = '' )  	{   $filters = ($str_filter && strlen($str_filter) > 0 ) ? $str_filter : jqGridUtils::GetParam($this->GridParams["filter"], "");   $rules = "";      if($filters) {   $count = 0;      if( function_exists('json_decode') && strtolower(trim($this->encoding)) == "utf-8" && $count==0 ) {   $jsona = json_decode($filters,true);   } else {   $jsona = jqGridUtils::decode($filters);   }   if(isset($jsona) && is_array($jsona)) {   $gopr = $jsona['groupOp'];   $rules[0]['data'] = 'dummy';    }      } else if (jqGridUtils::GetParam($this->GridParams['searchField'],'')){   $gopr = '';   $rules[0]['field'] = jqGridUtils::GetParam($this->GridParams['searchField'],'');   $rules[0]['op'] = jqGridUtils::GetParam($this->GridParams['searchOper'],'');   $rules[0]['data'] = jqGridUtils::GetParam($this->GridParams['searchString'],'');   $jsona = array();   $jsona['groupOp'] = "AND";   $jsona['rules'] = $rules;   $jsona['groups'] = array();   }   $ret = array("",$prm);   if(isset($jsona) && $jsona) {   if($rules && count($rules) > 0 ) {   if(!is_array($prm)) { $prm=array(); }   $ret = $this->getStringForGroup($jsona, $prm);   if(count($ret[1]) == 0 ) { $ret[1] = null; }   }   }   return $ret;  	}  	  	public function buildSearch ( $filter, $otype = 'str' )  	{   $ret = $this->_buildSearch( null, $filter );   if($otype === 'str') {   $s2a = explode("?",$ret[0]);   $csa = count($s2a);   $s = "";   for($i=0; $i < $csa-1; $i++)   {   $s .= $s2a[$i]." '".$ret[1][$i]."' ";   }   $s .= $s2a[$csa-1];   return $s;   }   return $ret;  	}  	  	protected function _setSQL()  	{   $sqlId = false;   if($this->readFromXML==true && strlen($this->SelectCommand) > 0 ){   $sqlId = $this->getSqlElement($this->SelectCommand);   } else if($this->SelectCommand && strlen($this->SelectCommand) > 0) {   $sqlId = $this->SelectCommand;   } else if($this->table && strlen($this->table)>0) {   if($this->dbtype == 'mongodb') {   $sqlId = $this->table;   } else {   $sqlId = "SELECT * FROM ".(string)$this->table;   }   }   if($this->dbtype == 'mongodb') {   $sqlId = $this->pdo->selectCollection($sqlId);   }   return $sqlId;  	}  	  	public function getUserDate()  	{   return $this->userdateformat;  	}  	  	public function setUserDate($newformat)  	{   $this->userdateformat = $newformat;  	}  	  	public function getUserTime()  	{   return $this->usertimeformat;  	}  	  	public function setUserTime($newformat)  	{   $this->usertimeformat = $newformat;  	}  	  	public function getDbDate()  	{   return $this->dbdateformat;  	}  	  	public function setDbDate($newformat)  	{   $this->dbdateformat = $newformat;  	}  	  	public function getDbTime()  	{   return $this->dbtimeformat;  	}  	  	public function setDbTime($newformat)  	{   $this->dbtimeformat = $newformat;  	}  	  	public function getGridParams()  	{   return $this->GridParams;  	}  	  	public function setGridParams($_aparams)  	{   if(is_array($_aparams) && !empty($_aparams)) {   $this->GridParams = array_merge($this->GridParams, $_aparams);   }  	}  	  	public function selectLimit($limsql='', $nrows=-1, $offset=-1, array $params=null, $order='', $sort='')  	{   $sql = null;   $sqlId = strlen($limsql)>0 ? $limsql : $this->_setSQL();   if(!$sqlId) { return false; }   $ret = $this->execute($sqlId, $params, $sql, true,$nrows,$offset, $order, $sort);   if ($ret) {   $ret = jqGridDB::fetch_object($sql, true, $this->pdo);   jqGridDB::closeCursor($sql);   return $ret;   } else {   return $ret;   }  	}  	  	public function queryGrid( array $summary=null, array $params=null, $echo=true)  	{   $sql = null;   $sqlId = $this->_setSQL();   if(!$sqlId) { return false; }      $page = (int)jqGridUtils::GetParam( $this->GridParams['page'],'1');       $limit = (int)jqGridUtils::GetParam( $this->GridParams['rows'],'20');       $sidx = jqGridUtils::GetParam( $this->GridParams['sort'],'');       $sord = jqGridUtils::GetParam( $this->GridParams['order'],'');       $search = jqGridUtils::GetParam( $this->GridParams['search'],'false');    $totalrows = jqGridUtils::GetParam($this->GridParams['totalrows'],'');   $sord = preg_replace("/[^a-zA-Z0-9]/", "", $sord);   $sidx = preg_replace("/[^a-zA-Z0-9. _,]/", "", $sidx);   $performcount = true;   $gridcnt = false;   $gridsrearch = '1';   if($this->cacheCount) {   $gridcnt = jqGridUtils::GetParam('grid_recs',false);   $gridsrearch = jqGridUtils::GetParam('grid_search','1');   if($gridcnt && (int)$gridcnt >= 0 ) $performcount = false;   }   if($search == 'true') {   if($this->dbtype == 'mongodb') {   $params = jqGridDB::_mongoSearch($params, $this->GridParams, $this->encoding, $this->datearray, $this->mongointegers);   } else {   $sGrid = $this->_buildSearch($params);   if($this->optimizeSearch === true || $this->dbtype=='array') {   $whr = "";   if($sGrid[0]) {   if(preg_match("/\s+WHERE\s+/is",$sqlId)) {   $whr = " AND ".$sGrid[0];   } else {   $whr = " WHERE ".$sGrid[0];   }   }   $sqlId .= $whr;   } else {   $whr = $sGrid[0] ? " WHERE ".$sGrid[0] : "";   $sqlId = "SELECT * FROM (".$sqlId.") gridsearch".$whr;   }   $params = $sGrid[1];   if($this->cacheCount && $gridsrearch !="-1") {   $tmps = crc32($whr."data".implode(" ",$params));   if($gridsrearch != $tmps) {   $performcount = true;   }   $gridsrearch = $tmps;   }   }   } else {   if($this->cacheCount && $gridsrearch !="-1") {   if($gridsrearch != '1') {   $performcount = true;   }   }   }   $performcount = $performcount && $this->performcount;   if($performcount) {   if($this->dbtype == 'mongodb') {   $qryData = jqGridDB::_mongocount($sqlId, $params, $summary);   } else {   $qryData = $this->_getcount($sqlId,$params,$summary);   }   if(is_object($qryData)) {   if(!isset($qryData->countr)) { $qryData->countr = null; }   if(!isset($qryData->COUNTR)) { $qryData->COUNTR = null; }   $count = $qryData->COUNTR ? $qryData->COUNTR : ($qryData->countr ? $qryData->countr : 0);   } else {   $count = isset($qryData['COUNTR']) ? $qryData['COUNTR'] : 0;   }   } else {   $count = $gridcnt;   }   if( $count > 0 ) {   $total_pages = ceil($count/$limit);   } else {   $count = 0;   $total_pages = 0;   $page = 0;   }   if ($page > $total_pages) { $page=$total_pages; }   $start = $limit*$page - $limit;    if ($start<0) { $start = 0; }      $result = new stdClass();   if(is_array($summary)) {   if(is_array($qryData)) { unset($qryData['COUNTR']);}   else { unset($qryData->COUNTR,$qryData->countr); }   foreach($qryData as $k=>$v) {   if ($v == null) { $v = 0; }   $result->userdata[$k] = $v;   }   }   if($this->cacheCount) {   $result->userdata['grid_recs'] = $count;   $result->userdata['grid_search'] = $gridsrearch;   $result->userdata['outres'] = $performcount;   }   if($this->userdata) {   if(!isset ($result->userdata)) { $result->userdata = array(); }   $result->userdata = jqGridUtils::array_extend($result->userdata, $this->userdata);   }   $result->records = $count;   $result->page = $page;   $result->total = $total_pages;   $uselimit = true;   if($totalrows ) {   $totalrows = (int)$totalrows;   if(is_int($totalrows)) {   if($totalrows === -1) {   $uselimit = false;   } else if($totalrows >0 ){   $limit = $totalrows;   }   }   }      if($this->dbtype !== 'mongodb' && $this->dbtype !== 'sqlsrv' && $this->dbtype !== 'odbcsqlsrv') {   if($sidx) { $sqlId .= " ORDER BY ".$sidx." ".$sord; }   }   $ret = $this->execute($sqlId, $params, $sql, $uselimit ,$limit,$start, $sidx, $sord);   if ($ret) {   $result->rows = jqGridDB::fetch_object($sql, true, $this->pdo);   jqGridDB::closeCursor($sql);   if($this->customClass) {   try {   $result = call_user_func(array($this->customClass,$this->customFunc),$result,$this->pdo);   } catch (Exception $e) {   echo "Can not call the method class - ".$e->getMessage();   }   } else if(function_exists($this->customFunc)) {   $result = call_user_func($this->customFunc,$result,$this->pdo);   }   if($echo){   $this->_gridResponse($result, jqGridUtils::GetParam('callback',false));   } else {   if($this->debug) { $this->debugout(); }   return $result;   }   } else {   echo "Could not execute query!!!";   }   if($this->debug) $this->debugout();  	}  	  	public function getSqlQuery()  	{   return $this->select;  	}  	public function getQueryParams()  	{   return $this->params;  	}    	  	protected function _rs($params=null, $summary=null, $excel=false)  	{   if($this->ExportCommand && strlen($this->ExportCommand)>0 ) {   $sqlId = $this->ExportCommand;   } else {   $sqlId = $this->_setSQL();   }   if(!$sqlId) { return false; }        $sidx = jqGridUtils::GetParam($this->GridParams['sort'], '');       $sord = jqGridUtils::GetParam($this->GridParams['order'],'');       $search = jqGridUtils::GetParam($this->GridParams['search'],'false');    $sord = preg_replace("/[^a-zA-Z0-9]/", "", $sord);   $sidx = preg_replace("/[^a-zA-Z0-9. _,]/", "", $sidx);     if($search == 'true') {   if($this->dbtype == 'mongodb') {   $params = jqGridDB::_mongoSearch($params, $this->GridParams, $this->encoding, $this->datearray, $this->mongointegers);   } else {   $sGrid = $this->_buildSearch( $params);   if( $this->dbtype=='array') {   $whr = "";   if($sGrid[0]) {   if(preg_match("/\s+WHERE\s+/is",$sqlId)) {    $whr = " AND ".$sGrid[0];   } else {   $whr = " WHERE ".$sGrid[0];   }   }   $sqlId .= $whr;   } else {   $whr = $sGrid[0] ? " WHERE ".$sGrid[0] : "";   $sqlId = "SELECT * FROM (".$sqlId.") gridsearch".$whr;   }   $params = $sGrid[1];   }   }   if($this->dbtype !== 'mongodb' && $this->dbtype !== 'sqlsrv' && $this->dbtype !== 'odbcsqlsrv') {   if($sidx) { $sqlId .= " ORDER BY ".$sidx." ".$sord; }   }   if( is_array($summary)) {   if($this->dbtype == 'mongodb') {   $qryData = jqGridDB::_mongocount($sqlId, $params, $summary);   } else {   $qryData = $this->_getcount($sqlId, $params, $summary);   }   unset($qryData->COUNTR,$qryData->countr);   foreach($qryData as $k=>$v)   {   if ($v == null) { $v = 0; }   $this->tmpvar[$k] = $v;   }   }   if($this->userdata) {   if(!$this->tmpvar) {   $this->tmpvar = array();   }   $this->tmpvar = jqGridUtils::array_extend($this->tmpvar, $this->userdata);     }   if($this->debug) {   $this->logQuery($sqlId, $params);   $this->debugout();   }   $this->execute($sqlId, $params, $sql, true, $this->gSQLMaxRows, 0, $sidx, $sord );   return $sql;  	}      	  	public function querySubGrid($params, $echo=true)  	{   if($this->SubgridCommand && strlen($this->SubgridCommand)>0) {   $result = new stdClass();   $result->rows = $this->queryForObject($this->SubgridCommand, $params,true);   if($echo) {   $this->_gridResponse($result, jqGridUtils::GetParam('callback',false));   } else {   return $result;   }   }  	}  	  	protected function _gridResponse($response, $callback = null)  	{   if($this->dataType=="xml")   {   if(isset($response->records)) {   $response->rows["records"]= $response->records;   unset($response->records);   }   if(isset($response->total)) {   $response->rows["total"]= $response->total;   unset($response->total);   }   if(isset($response->page)) {   $response->rows["page"]= $response->page;   unset($response->page);   }   if ( stristr($_SERVER["HTTP_ACCEPT"],"application/xhtml+xml") )   {   header("Content-type: application/xhtml+xml;charset=",$this->encoding);   } else {   header("Content-type: text/xml;charset=".$this->encoding);   }   echo jqGridUtils::toXml($response,'root', null, $this->encoding, $this->xmlCDATA );   } else if ($this->dataType=="json" || $this->dataType =="jsonp") {   $jsonp = $this->dataType =="jsonp" && $callback;   if($jsonp) {   header("Access-Control-Allow-Origin: *");   }   header("Content-type: text/x-json;charset=".$this->encoding);   if(function_exists('json_encode') && strtolower($this->encoding) == 'utf-8') {   if($jsonp) {   echo $callback."(". json_encode($response) . ")";   } else {   echo json_encode($response);   }   } else {   if($jsonp) {   echo $callback."(". jqGridUtils::encode($response). ")";   } else {   echo jqGridUtils::encode($response);   }   }   }  	}  	  	public function addUserData($adata){   if(is_array($adata))   $this->userdata = $adata;  	}  }    