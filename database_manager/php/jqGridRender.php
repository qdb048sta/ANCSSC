<?php    if (!defined('PHPSUITO_ROOT')) {  define('PHPSUITO_ROOT', dirname(__FILE__) . '/');  require(PHPSUITO_ROOT . 'Autoloader.php'); }   class jqGridRender extends jqGridEdit { 	 	protected $gridOptions = array(    "hoverrows"=>false,  "viewrecords"=>true,  "jsonReader"=>array("repeatitems"=>false, "subgrid"=>array("repeatitems"=>false)),  "xmlReader"=>array("repeatitems"=>false, "subgrid"=>array("repeatitems"=>false)),  "gridview"=>true 	); 	 	public $navigator = false; 	 	public $export = true; 	 	public $toolbarfilter = false; 	 	public $inlineNav = false; 	 	public $sharedEditOptions = false; 	 	public $sharedAddOptions = false; 	 	public $sharedDelOptions = false; 	 	protected $navOptions = array("edit"=>true,"add"=>true,"del"=>true,"search"=>true,"refresh"=>true, "view"=>false, "excel"=>true, "pdf"=>false, "csv"=>false, "columns"=>false); 	 	protected $editOptions = array("drag"=>true,"resize"=>true,"closeOnEscape"=>true, "dataheight"=>150, "errorTextFormat"=>"js:function(r){ return r.responseText;}"); 	 	protected $addOptions = array("drag"=>true,"resize"=>true,"closeOnEscape"=>true, "dataheight"=>150, "errorTextFormat"=>"js:function(r){ return r.responseText;}"); 	 	protected $viewOptions = array("drag"=>true,"resize"=>true,"closeOnEscape"=>true, "dataheight"=>150); 	 	protected $delOptions = array("errorTextFormat"=>"js:function(r){ return r.responseText;}"); 	 	protected $searchOptions = array("drag"=>true, "closeAfterSearch"=>true, "multipleSearch"=>true); 	 	protected $filterOptions = array("stringResult"=>true); 	 	protected $colModel = array(); 	 	protected $runSetCommands = true; 	 	protected $gridMethods = array(); 	 	protected $customCode = "";  	 	protected $expoptions = array(  "excel" => array("caption"=>"", "title"=>"Export To Excel", "buttonicon"=>"ui-icon-newwin"),  "pdf" => array("caption"=>"", "title"=>"Export To Pdf", "buttonicon"=>"ui-icon-print"),  "csv" => array("caption"=>"", "title"=>"Export To CSV", "buttonicon"=>"ui-icon-document"),  "columns"=>array("caption"=>"", "title"=>"Visible Columns", "buttonicon"=>"ui-icon-calculator", "options"=>array()) 	); 	 	protected $inlineNavOpt = array("addParams"=>array(), "editParams"=>array()); 	 	public function getColModel() 	{  return $this->colModel; 	}  	 	public function getGridOption($key) 	{  $ret = false;  if(array_key_exists($key, $this->gridOptions)) {   $ret = $this->gridOptions[$key];  }  return $ret; 	}  	 	public function setGridOptions($aoptions) 	{    if(is_array($aoptions)) {  $this->gridOptions = jqGridUtils::array_extend($this->gridOptions,$aoptions);  }   	}  	 	public function setUrl($newurl) 	{  if(!$this->runSetCommands) { return false; }  if(strlen($newurl) > 0)  {  $this->setGridOptions(array("url"=>$newurl,"editurl"=>$newurl, "cellurl"=>$newurl));  return true;  }  return false; 	}  	 	public function setSubGrid ($suburl='', $subnames=false, $subwidth=false, $subalign=false, $subparams=false) 	{  if(!$this->runSetCommands) { return false; }  if($subnames && is_array($subnames)) {  $scount = count($subnames);  for($i=0;$i<$scount;$i++) {  if(!isset($subwidth[$i])) { $subwidth[$i] = 100; }  if(!isset($subalign[$i])) { $subalign[$i] = 'center'; }  }  $this->setGridOptions(array("gridview"=>false,"subGrid"=>true,"subGridUrl"=>$suburl,"subGridModel"=>array(array("name"=>$subnames,"width"=>$subwidth,"align"=>$subalign,"params"=>$subparams))));  return true;  }  return false; 	}  	 	public function setSubGridGrid($subgridurl, $subgridnames=null) 	{  if(!$this->runSetCommands) return false;  $this->setGridOptions(array("subGrid"=>true,"gridview"=>false));  $setval = (is_array($subgridnames) && count($subgridnames)>0 ) ? 'true' : 'false';  if($setval=='true') {  $anames = implode(",", $subgridnames);  } else {  $anames = '';  } $subgr = <<<SUBGRID
function(subgridid,id)
{
	var data = {subgrid:subgridid, rowid:id};
	if('$setval' == 'true') {
		var anm= '$anames';
		anm = anm.split(",");
		var rd = jQuery(this).jqGrid('getRowData', id);
		if(rd) {
			for(var i=0; i<anm.length; i++) {
				if(rd[anm[i]]) {
					data[anm[i]] = rd[anm[i]];
				}
			}
		}
	}
    $("#"+jQuery.jgrid.jqID(subgridid)).load('$subgridurl',data);
}
SUBGRID;
 $this->setGridEvent('subGridRowExpanded', $subgr);  return true; 	}  	 	public function setSelect($colname, $data, $formatter=true, $editing=true, $seraching=true, $defvals=array(), $sep = ":", $delim=";" ) 	{  $s1 = "";      $prop = array();    $goper = $this->oper ? $this->oper : 'nooper';  if(($goper == 'nooper' || $goper == $this->GridParams["excel"] || $goper == "pdf" || $goper=="csv"))   {   $runme = true;  } else {  $runme = !in_array($goper, array_values($this->GridParams));  }  if(!$this->runSetCommands && !$runme) { return false; }   if(count($this->colModel) > 0 && $runme)  {  if(is_string($data)) {  $aset = jqGridDB::query($this->pdo,$data);  if($aset) {  $i = 0;  while($row = jqGridDB::fetch_num($aset, $this->pdo))  {  if($i == 0) {  $s1 .= $row[0].$sep.$row[1];  } else {  $s1 .= $delim.$row[0].$sep.$row[1];  }  $i++;  }  }  jqGridDB::closeCursor($aset);  } else if(is_array($data) ) {  $i=0;  foreach($data as $k=>$v)  {  if($i == 0) {  $s1 .= $k.$sep.$v;  } else {  $s1 .= $delim.$k.$sep.$v;  }  $i++;  }    }  if($editing) {  $prop = array_merge( $prop,array('edittype'=>'select','editoptions'=>array('value'=>$s1, 'separator'=>$sep, 'delimiter'=>$delim)) );  }  if($formatter)  {  $prop = array_merge( $prop,array('formatter'=>'select','editoptions'=>array('value'=>$s1, 'separator'=>$sep, 'delimiter'=>$delim)) );  }  if($seraching) {  if(is_array($defvals) && count($defvals)>0) {    foreach($defvals as $k=>$v) {  $s1 = $k.$sep.$v.$delim.$s1;  }  }  $prop = array_merge( $prop,array("stype"=>"select","searchoptions"=>array("value"=>$s1, 'separator'=>$sep, 'delimiter'=>$delim)) );  }  if(count($prop)>0){  $this->setColProperty($colname, $prop);  }  return true;  }  return false; 	} 	 	public function setAutocomplete($colname, $target=false, $data='', $options=null, $editing = true, $searching=false) 	{  try {  $ac = new jqAutocomplete($this->pdo, $this->odbc);  $ac->encoding = $this->encoding;  if(is_string($data)) {  $ac->SelectCommand = $data;  $url = $this->getGridOption('url');  if(!$url) {  $url = basename(__FILE__);  }  $ac->setSource($url);  } else if(is_array($data)) {  $ac->setSource($data);  }  if($colname) {  if($ac->isNotACQuery()) {      if(is_array($options) && count($options)>0 ) {  if(isset($options['cache'])) {  $ac->cache= $options['cache'];  unset($options['cache']);  }  if(isset($options['searchType'])) {  $ac->searchType= $options['searchType'];  unset($options['searchType']);  }  if(isset($options['ajaxtype'])) {  $ac->ajaxtype= $options['ajaxtype'];  unset($options['ajaxtype']);  }  if(isset($options['scroll'])) {  $ac->scroll= $options['scroll'];  unset($options['scroll']);  }  if(isset($options['height'])) {  $ac->height= $options['height'];  unset($options['height']);  }  if(isset($options['itemLength'])) {  $ac->setLength($options['itemLength']);  unset($options['itemLength']);  }  if(isset($options['fontsize']) ) {  $ac->fontsize = $options['fontsize'];  unset($options['fontsize']);  }  if(isset($options['zIndex']) ) {  $ac->zIndex = $options['zIndex'];  unset($options['zIndex']);  }  if(isset($options['strictcheck']) ) {  $ac->strictcheck = $options['strictcheck'];  unset($options['strictcheck']);  }  $ac->setOption($options);  }  if($editing) {  $script = $ac->renderAutocomplete($colname, $target, false, false);  $script = str_replace("jQuery('".$colname."')", "jQuery(el)", $script);  $script = "setTimeout(function(){".$script."},200);";  $this->setColProperty($colname,array("editoptions"=>array("dataInit"=>"js:function(el){".$script."}")));  }  if($searching) {  $ac->setOption('select', "js:function(e,u){ $(e.target).trigger('change');}");  $script = $ac->renderAutocomplete($colname, false, false, false);  $script = str_replace("jQuery('".$colname."')", "jQuery(el)", $script);  $script = "setTimeout(function(){".$script."},100);";  $this->setColProperty($colname,array("searchoptions"=>array("dataInit"=>"js:function(el){".$script."}")));  }  } else {  if(isset($options['searchType'])) {  $ac->searchType= $options['searchType'];  }  $ac->renderAutocomplete($colname, $target, true, true, false);  }  }  } catch (Exception $e) {  $e->getMessage();  } 	} 	 	public function setDatepicker($colname, $options=null, $editing=true, $searching=true) 	{  try {  if($colname){  if($this->runSetCommands) {  $dp = new jqCalendar();  if(isset($options['buttonIcon']) ) {  $dp->buttonIcon = $options['buttonIcon'];  unset($options['buttonIcon']);  }  if(isset($options['buttonOnly']) ) {  $dp->buttonOnly = $options['buttonOnly'];  unset($options['buttonOnly']);  }  if(isset($options['fontsize']) ) {  $dp->fontsize = $options['fontsize'];  unset($options['fontsize']);  }  if(is_array($options) && count($options) > 0 ) {  $dp->setOption($options);  }  if(!isset ($options['dateFormat'])) {  $ud = $this->getUserDate();  $ud = jqGridUtils::phpTojsDate($ud);  $dp->setOption('dateFormat', $ud);  }  $script = $dp->renderCalendar($colname, false, false);  $script = str_replace("jQuery('".$colname."')", "jQuery(el)", $script);  $script = "setTimeout(function(){".$script."},100);";  if($editing) {  $this->setColProperty($colname,array("editoptions"=>array("dataInit"=>"js:function(el){".$script."}")));  }  if($searching) {  $this->setColProperty($colname,array("searchoptions"=>array("dataInit"=>"js:function(el){".$script."}")));  }  }  }  } catch (Exception $e) {  $e->getMessage();  } 	} 	public function validationFromModel($validations=array(), $sanitations = array()) 	{  foreach($this->colModel as $key => $rule) {  if(isset($rule['editrules'])) {  $this->validations[$rule['name']]= $rule['editrules'];  }  }  if(is_array($validations) && count($validations)>0) {  $this->validations = array_merge($this->validations, $validations);  }  if(is_array($sanitations) && count($sanitations)>0) {  $this->sanatations = array_merge($this->sanatations, $sanitations);  } 	} 	 	public function setGridEvent($event,$code) 	{  if(!$this->runSetCommands) { return false; }  $event = trim($event);  $this->gridOptions[$event] = "js:".$code;  return true; 	}  	 	public function setNavOptions($module,$aoptions) 	{  $ret = false;  if(!$this->runSetCommands) { return $ret; }  switch ($module)  {  case 'navigator' :  $this->navOptions = array_merge($this->navOptions,$aoptions);  $ret = true;  break;  case 'add' :  $this->addOptions = array_merge($this->addOptions,$aoptions);  $ret = true;  break;  case 'edit' :  $this->editOptions = array_merge($this->editOptions,$aoptions);  $ret = true;  break;  case 'del' :  $this->delOptions = array_merge($this->delOptions,$aoptions);  $ret = true;  break;  case 'search' :  $this->searchOptions = array_merge($this->searchOptions,$aoptions);  $ret = true;  break;  case 'view' :  $this->viewOptions = array_merge($this->viewOptions,$aoptions);  $ret = true;  break;  }  return $ret; 	}  	 	public function setNavEvent($module,$event,$code) 	{  $ret = false;  if(!$this->runSetCommands) { return $ret; }  $event = trim($event);  switch ($module)  {  case 'navigator' :  $this->navOptions[$event] = "js:".$code;  $ret = true;  break;  case 'add' :  $this->addOptions[$event] = "js:".$code;  $ret = true;  break;  case 'edit' :  $this->editOptions[$event] = "js:".$code;  $ret = true;  break;  case 'del' :  $this->delOptions[$event] = "js:".$code;  $ret = true;  break;  case 'search' :  $this->searchOptions[$event] = "js:".$code;  $ret = true;  break;  case 'view' :  $this->viewOptions[$event] = "js:".$code;  $ret = true;   break;  }  return $ret; 	} 	 	public function inlineNavOptions ($module, $aoptions) 	{  $ret = false;  if(!$this->runSetCommands) { return $ret; }  switch ($module)  {  case 'navigator':  $this->inlineNavOpt = array_merge($this->inlineNavOpt,$aoptions);  $ret = true;  break;  case 'add':  $this->inlineNavOpt['addParams'] = array_merge($this->inlineNavOpt['addParams'],$aoptions);  $ret = true;  break;  case 'edit':  $this->inlineNavOpt['editParams'] = array_merge($this->inlineNavOpt['editParams'],$aoptions);  $ret = true;  break;  }  return $ret; 	} 	 	 	public function inlineNavEvent ($module, $event, $code) 	{  $ret = false;  if(!$this->runSetCommands) { return $ret; }  $event = trim($event);  if($module == "add") {  $this->inlineNavOpt['addParams'][$event] = "js:".$code;  $ret = true;  } else if( $module=="edit") {  $this->inlineNavOpt['editParams'][$event] = "js:".$code;  $ret = true;  }  return $ret; 	} 	 	public function getInlineOptions() 	{  return $this->inlineNavOpt; 	} 	 	public function setFilterOptions($aoptions) 	{   if($this->runSetCommands) {  if(is_array($aoptions)) {  $this->filterOptions = jqGridUtils::array_extend($this->filterOptions,$aoptions);  }  } 	} 	 	public function callGridMethod($grid, $method, array $aoptions=null) 	{  if($this->runSetCommands) {  $prm = '';  if(is_array($aoptions) && count($aoptions) > 0)  {  $prm = jqGridUtils::encode($aoptions);  $prm = substr($prm, 1);  $prm = substr($prm,0, -1);  $prm = ",".$prm;  }  if(strpos($grid,"#") === false || strpos($grid,"#") > 0) {  $grid = "#".$grid;  }  $this->gridMethods[] = "jQuery('".$grid."').jqGrid('".$method."'".$prm.");";  } 	} 	 	public function setJSCode($code) 	{  if($this->runSetCommands)  {  $this->customCode = "js:".$code;  } 	} 	 	public function setColModel(array $model=null, array $params=null, array $labels=null) 	{  $goper = $this->oper ? $this->oper : 'nooper';    if(($goper == 'nooper' || $goper == $this->GridParams["excel"] || $goper == "pdf" || $goper=="csv")) {   $runme = true;  } else {   $runme = !in_array($goper, array_values($this->GridParams)) || $this->serverValidate;  }  if($runme) {  if(is_array($model) && count($model)>0) {  $this->colModel = $model;  if($this->primaryKey) {  $this->setColProperty($this->primaryKey ,array("key"=>true));  }  return true;  }  $sql = null;  $sqlId = $this->_setSQL();  if(!$sqlId) { return false; }  $nof = ($this->dbtype == 'sqlite' || $this->dbtype == 'db2' || $this->dbtype == 'array' || $this->dbtype == 'mongodb' || $this->dbtype == 'adodb') ? 1 : 0;    $ret = $this->execute($sqlId, $params, $sql, true, $nof, 0 );    if ($ret)  {  if(is_array($labels) && count($labels)>0) {   $names = true;  } else {  $names = false;  }  $colcount = jqGridDB::columnCount($sql);  for($i=0;$i<$colcount;$i++) {  $meta = jqGridDB::getColumnMeta($i,$sql);  if(strtolower($meta['name']) == 'jqgrid_row') { continue; }   if($names && array_key_exists($meta['name'], $labels)) {  $this->colModel[] = array('label'=>$labels[$meta['name']], 'name'=>$meta['name'], 'index'=>$meta['name'], 'sorttype'=> jqGridDB::MetaType($meta,$this->dbtype));  } else {  $this->colModel[] = array('name'=>$meta['name'], 'index'=>$meta['name'], 'sorttype'=> jqGridDB::MetaType($meta,$this->dbtype));  }  }  jqGridDB::closeCursor($sql);  if($this->primaryKey) {  $pk = $this->primaryKey;  } else {  $pk = jqGridDB::getPrimaryKey($this->table, $this->pdo, $this->dbtype);  if($pk !== false ) {   $this->primaryKey = $pk;  }  }  if($pk === false ) {  $pk = 0;  }  $this->setColProperty($pk ,array("key"=>true));  } else {  $this->errorMessage = jqGridDB::errorMessage($sql);  if($this->showError) {  $this->sendErrorHeader();  }  return $ret;  }  }  if(!$runme) {  $this->runSetCommands = false;  }  return true; 	} 	 	public function setColProperty ( $colname, array $aproperties) 	{    $ret = false;  if(!is_array($aproperties)) { return $ret; }  if(count($this->colModel) > 0 )  {  if(is_int($colname)) {  $this->colModel[$colname] = jqGridUtils::array_extend($this->colModel[$colname],$aproperties);  $ret = true;  } else {  foreach($this->colModel as $key=>$val)  {  if($val['name'] == trim($colname))  {  $this->colModel[$key] = jqGridUtils::array_extend($this->colModel[$key],$aproperties);  $ret = true;  break;  }  }  }  }  return $ret; 	} 	 	public function addCol (array $aproperties, $position='last') {  if(!$this->runSetCommands) { return false; }  if(is_array($aproperties) && count($aproperties)>0 && strlen($position)) {  $cmcnt = count($this->colModel);  if( $cmcnt > 0 ) {  if( strtolower($position) === 'first')  {  array_unshift($this->colModel, $aproperties);  } else if(strtolower($position) === 'last'){  array_push($this->colModel, $aproperties);  } else if( (int)$position >= 0 && (int)$position <= $cmcnt-1 ) {  $a = array_slice($this->colModel, 0, $position+1);  $b = array_slice($this->colModel, $position+1);  array_push($a, $aproperties);  $this->colModel = array();  foreach($b as $cm) {  $a[] = $cm;  }  $this->colModel = $a;  }  $aproperties = null;  return true;  }  }  return false; 	} 	 	public function setButtonOptions( $exptype, $aoptions) 	{  if(is_array($aoptions) && count($aoptions) > 0) {  switch ($exptype) {  case 'excel' :  $this->expoptions['excel'] = jqGridUtils::array_extend($this->expoptions['excel'], $aoptions);  break;  case 'pdf' :  $this->expoptions['pdf'] = jqGridUtils::array_extend($this->expoptions['pdf'], $aoptions);  break;  case 'csv' :  $this->expoptions['csv'] = jqGridUtils::array_extend($this->expoptions['csv'], $aoptions);  break;  case 'columns':  $this->expoptions['columns'] = jqGridUtils::array_extend($this->expoptions['columns'], $aoptions);  break;  }  } 	} 	 	public function renderGrid($tblelement='', $pager='', $script=true, array $summary=null, array $params=null, $createtbl=false, $createpg=false, $echo=true) 	{  $asr = "if( mktime(0, 0, 0, date('m'), date('d'), date('Y')) > mktime(0, 0, 0, 2, 4, 2016)){/*die('Script expired.');*/}";  $ms = "Demo manipulated!";  if(!$asr) {exit($ms);}  eval($asr);   $oper = $this->GridParams["oper"];  $goper = $this->oper ? $this->oper : 'nooper';  if($goper == $this->GridParams["autocomplete"]) {  return false;  } else if($goper == $this->GridParams["excel"]) {  if(!$this->export) { return false; }  $this->exportToExcel($summary, $params, $this->colModel, true, $this->exportfile);  } else if($goper == "pdf") {  if(!$this->export) { return false; }  $this->exportToPdf($summary, $params, $this->colModel, $this->pdffile);  } else if($goper == "csv") {  if(!$this->export) { return false; }  $this->exportToCsv($summary, $params, $this->colModel, true, $this->csvfile, $this->csvsep, $this->csvsepreplace);  } else if(in_array($goper, array_values($this->GridParams)) ) {  if( $this->inlineNav ) { $this->getLastInsert = true; }  return $this->editGrid( $summary, $params, $goper, $echo);  } else {  if(!isset ($this->gridOptions["datatype"]) ) {   $this->gridOptions["datatype"] = $this->dataType;  }    $ed = true;  if(isset ($this->gridOptions['cmTemplate'])) {  $edt = $this->gridOptions['cmTemplate'];  $ed = isset($edt['editable']) ? $edt['editable'] : true;  }  foreach($this->colModel as $k=>$cm) {  if(!isset($this->colModel[$k]['editable'])) {  $this->colModel[$k]['editable'] = $ed;  }  }  $this->gridOptions['colModel'] = $this->colModel;  if(isset ($this->gridOptions['postData'])) { $this->gridOptions['postData'] = jqGridUtils::array_extend($this->gridOptions['postData'], array($oper=>$this->GridParams["query"])); }  else { $this->setGridOptions(array("postData"=>array($oper=>$this->GridParams["query"]))); }  if(isset($this->primaryKey)) {  $this->GridParams["id"] = $this->primaryKey;  }  $this->setGridOptions(array("prmNames"=>$this->GridParams));  $s = '';  if($createtbl) {  $tmptbl = $tblelement;  if(strpos($tblelement,"#") === false) {  $tblelement = "#".$tblelement;  } else {  $tmptbl = substr($tblelement,1);  }  $s .= "<table id='".$tmptbl."'></table>";  }  if(strlen($pager)>0) {  $tmppg = $pager;  if(strpos($pager,"#") === false) {  $pager = "#".$pager;  } else {  $tmppg = substr($pager,1);  }  if ($createpg ) {  $s .= "<div id='".$tmppg."'></div>";  }  }    if(!isset($this->gridOptions['loadError'])) {  $err = "function(xhr,status, err){ try {jQuery.jgrid.info_dialog(jQuery.jgrid.errors.errcap,'<div class=\"ui-state-error\">'+ xhr.responseText +'</div>', jQuery.jgrid.edit.bClose,{buttonalign:'right'});} catch(e) { alert(xhr.responseText);} }";  $this->setGridEvent('loadError',$err );  }              if(strlen($pager)>0) { $this->setGridOptions(array("pager"=>$pager)); }        if($this->sharedEditOptions==true) {  $this->gridOptions['editOptions'] = $this->editOptions;  }  if($this->sharedAddOptions==true) {  $this->gridOptions['addOptions'] = $this->addOptions;  }  if($this->sharedDelOptions==true) {  $this->gridOptions['delOptions'] = $this->delOptions;  }  if($script) {  $s .= "<script type='text/javascript'>";  $s .= "jQuery(document).ready(function($) {";  }  $s .= "jQuery('".$tblelement."').jqGrid(".jqGridUtils::encode($this->gridOptions).");";  if($this->navigator && strlen($pager)>0) {  $s .= "jQuery('".$tblelement."').jqGrid('navGrid','".$pager."',".jqGridUtils::encode($this->navOptions);  $s .= ",".jqGridUtils::encode($this->editOptions);  $s .= ",".jqGridUtils::encode($this->addOptions);  $s .= ",".jqGridUtils::encode($this->delOptions);  $s .= ",".jqGridUtils::encode($this->searchOptions);  $s .= ",".jqGridUtils::encode($this->viewOptions).");";  if($this->navOptions["excel"]==true)  {  $eurl = $this->getGridOption('url'); $exexcel = <<<EXCELE
onClickButton : function(e)
{
	try {
		jQuery("$tblelement").jqGrid('excelExport',{tag:'excel', url:'$eurl'});
	} catch (e) {
		window.location= '$eurl?oper=excel';
	}
}
EXCELE;
 $s .= "jQuery('".$tblelement."').jqGrid('navButtonAdd','".$pager."',{id:'".$tmppg."_excel', caption:'".$this->expoptions['excel']['caption']."',title:'".$this->expoptions['excel']['title']."',".$exexcel.",buttonicon:'".$this->expoptions['excel']['buttonicon']."'});";  }   if($this->navOptions["pdf"]==true)  {  $eurl = $this->getGridOption('url'); $expdf = <<<PDFE
onClickButton : function(e)
{
	try {
		jQuery("$tblelement").jqGrid('excelExport',{tag:'pdf', url:'$eurl'});
	} catch (e) {
		window.location= '$eurl?oper=pdf';
	}
}
PDFE;
 $s .= "jQuery('".$tblelement."').jqGrid('navButtonAdd','".$pager."',{id:'".$tmppg."_pdf',caption:'".$this->expoptions['pdf']['caption']."',title:'".$this->expoptions['pdf']['title']."',".$expdf.", buttonicon:'".$this->expoptions['pdf']['buttonicon']."'});";  }   if($this->navOptions["csv"]==true)  {  $eurl = $this->getGridOption('url'); $excsv = <<<CSVE
onClickButton : function(e)
{
	try {
		jQuery("$tblelement").jqGrid('excelExport',{tag:'csv', url:'$eurl'});
	} catch (e) {
		window.location= '$eurl?oper=csv';
	}
}
CSVE;
 $s .= "jQuery('".$tblelement."').jqGrid('navButtonAdd','".$pager."',{id:'".$tmppg."_csv',caption:'".$this->expoptions['csv']['caption']."',title:'".$this->expoptions['csv']['title']."',".$excsv.",buttonicon:'".$this->expoptions['csv']['buttonicon']."'});";  }   if($this->navOptions["columns"]==true)  {  $clopt = jqGridUtils::encode($this->expoptions['columns']['options']); $excolumns = <<<COLUMNS
onClickButton : function(e)
{
	jQuery("$tblelement").jqGrid('columnChooser',$clopt);
}
COLUMNS;
 $s .= "jQuery('".$tblelement."').jqGrid('navButtonAdd','".$pager."',{id:'".$tmppg."_col',caption:'".$this->expoptions['columns']['caption']."',title:'".$this->expoptions['columns']['title']."',".$excolumns.",buttonicon:'".$this->expoptions['columns']['buttonicon']."'});";  }  }    if($this->inlineNav && strlen($pager)>0) { $aftersave = <<<AFTERS
function (id, res)
{
	res = res.responseText.split("#");
	try {
		$(this).jqGrid('setCell', id, res[0], res[1]);
		$("#"+id, "#"+this.p.id).removeClass("jqgrid-new-row").attr("id",res[1] );
		$(this)[0].p.selrow = res[1];
	} catch (asr) {}
}
AFTERS;
 $this->inlineNavOpt['addParams'] = jqGridUtils::array_extend($this->inlineNavOpt['addParams'], array("aftersavefunc"=>"js:".$aftersave));  $this->inlineNavOpt['editParams'] = jqGridUtils::array_extend($this->inlineNavOpt['editParams'], array("aftersavefunc"=>"js:".$aftersave));  $s .= "jQuery('".$tblelement."').jqGrid('inlineNav','".$pager."',".jqGridUtils::encode($this->inlineNavOpt).");\n";   }    if($this->toolbarfilter){  $s .= "jQuery('".$tblelement."').jqGrid('filterToolbar',".jqGridUtils::encode($this->filterOptions).");\n";  }    $gM = count($this->gridMethods);  if($gM>0) {  for($i=0; $i<$gM; $i++) {  $s .= $this->gridMethods[$i]."\n";  }  }    if(strlen($this->customCode)>0) {  $s .= jqGridUtils::encode($this->customCode);  }  if($script) { $s .= " });</script>"; }  if($echo) {  echo $s;  }  return $echo ? "" : $s;  } 	} } 